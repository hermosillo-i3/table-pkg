name: Assign a reviewer for the PR and post it on slack

on:
   pull_request:
     branches: [main]
     types: [opened]

permissions:
  contents: read
  pull-requests: write

jobs:
  select-reviewer:
    runs-on: ubuntu-latest
    outputs:
      github-reviewer: ${{ steps.select-user.outputs.github-reviewer }}
      slack-reviewer: ${{ steps.select-user.outputs.slack-reviewer }}
      random-emoji: ${{ steps.select-emoji.outputs.random-emoji }}
      pr-author-slack: ${{ steps.select-author.outputs.pr-author-slack }}

    steps:
      - name: Select reviewer with least total reviews and show workload summary
        id: select-user
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_GITHUB_TOKEN }}
        run: |
            # Obtener al revisor con menos carga para asignarle el PR
            start_date="${{ vars.REVIEW_COUNT_START_DATE }}"
            
            if [ -z "$start_date" ]; then
              echo "‚ö†Ô∏è  Variable REVIEW_COUNT_START_DATE no configurada"
              echo "üìÖ Formato requerido: YYYY-MM-DD (ejemplo: 2024-01-01)"
              echo "üìÖ Contando desde el inicio de los tiempos..."
              closed_date_filter=""
            else
              echo "üìÖ Contando todas las reviews abiertas y aquellas cerradas desde: $start_date"
              closed_date_filter="+closed:>=$start_date"
            fi
            
            echo "üìä RESUMEN DE CARGA DE TRABAJO POR REVISOR"
            echo "==========================================================================="
            
            # Load the JSON data from the GitHub Actions variable or secret
            user_map='${{ vars.REVIEWERS }}'
  
            # Get the GitHub actor (author of the PR)
            pr_author="${{ github.actor }}"

            # Parse JSON and filter out the PR author
            filtered_users=$(echo $user_map | jq 'del(."'"$pr_author"'")')

            # Check if there are any users left after filtering
            if [ "$(echo $filtered_users | jq '. | length')" -eq 0 ]; then
               echo "No other users available for selection."
               exit 1
            fi

            # Get all GitHub usernames (keys) from the filtered map
            github_users=($(echo $filtered_users | jq -r 'keys[]'))
            
            # Initialize variables to track the user with minimum reviews
            min_reviews=""
            selected_github_user=""
            selected_slack_user=""
            first_user=true
            
            # For each potential reviewer, calculate their total reviews
            for github_user in "${github_users[@]}"; do              
              # Count PRs abiertos con review request pendiente
              pending_reviews=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                "https://api.github.com/search/issues?q=org:${{ github.repository_owner }}+type:pr+state:open+review-requested:$github_user" | \
                jq '.total_count // 0')
              
              # Count PRs abiertos donde ya hizo review pero siguen abiertos
              reviewed_open=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                "https://api.github.com/search/issues?q=org:${{ github.repository_owner }}+type:pr+state:open+reviewed-by:$github_user" | \
                jq '.total_count // 0')
              
              # Total PRs abiertos = pendientes + ya revisados pero a√∫n abiertos
              open_reviews=$((pending_reviews + reviewed_open))
              
              # Count PRs cerrados donde hizo review - CON filtro de fecha de cierre
              closed_reviews=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                "https://api.github.com/search/issues?q=org:${{ github.repository_owner }}+type:pr+state:closed+reviewed-by:$github_user$closed_date_filter" | \
                jq '.total_count // 0')
              
              # Calculate total reviews
              total_reviews=$((open_reviews + closed_reviews))
              
              echo "üë§ $github_user: $total_reviews reviews totales ($pending_reviews pendientes + $reviewed_open revisados abiertos + $closed_reviews cerrados completados)"
              
              # Select user with minimum reviews (to balance workload)
              if [ "$first_user" = true ] || [ "$total_reviews" -lt "$min_reviews" ]; then
                min_reviews=$total_reviews
                selected_github_user=$github_user
                selected_slack_user=$(echo $filtered_users | jq -r '."'$github_user'"')
                first_user=false
              fi
            done
            
            echo "==========================================================================="
            echo "‚úÖ Revisor seleccionado: $selected_github_user"
            echo "   üìä Reviews totales: $min_reviews"
            echo "==========================================================================="
            
            echo "github-reviewer=$selected_github_user" >> "$GITHUB_OUTPUT"
            echo "slack-reviewer=$selected_slack_user" >> "$GITHUB_OUTPUT"

      - name: Select a random emoji
        id: select-emoji
        run: |
          # Select a random emoji from vars.SLACK_EMOJIS
          IFS=' ' read -r -a emojis <<< "${{ vars.SLACK_EMOJIS }}"
          random_emoji=${emojis[$((RANDOM % ${#emojis[@]}))]}
          echo "random-emoji=$random_emoji" >> "$GITHUB_OUTPUT"
      
      - name: Get PR author
        id: select-author
        run: |
          # Load the JSON data from the GitHub Actions variable or secret
          user_map='${{ vars.AUTHORS }}'
  
          # Get the GitHub actor (author of the PR)
          pr_author="${{ github.actor }}"

          # Extract the PR author's Slack ID from the JSON
          pr_author_slack=$(echo $user_map | jq -r '."'${pr_author}'"')
          echo "pr-author-slack=$pr_author_slack" >> "$GITHUB_OUTPUT"

  assign-reviewer:
    runs-on: ubuntu-latest
    needs: [select-reviewer]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Assign reviewer to PR
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REVIEWER: ${{ needs.select-reviewer.outputs.github-reviewer }}
        run: |
          echo "Asignando reviewer: $REVIEWER al PR #$PR_NUMBER"
          
          # Verificar que tenemos los datos necesarios
          if [ -z "$REVIEWER" ]; then
            echo "‚ùå Error: No se pudo seleccionar un reviewer"
            exit 1
          fi
            
            # Fallback con curl mejorado
            response=$(curl -s -w "%{http_code}" -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/requested_reviewers" \
              -d "{\"reviewers\":[\"$REVIEWER\"]}")
              
            http_code="${response: -3}"
            response_body="${response%???}"
            
            if [ "$http_code" -eq 201 ]; then
              echo "‚úÖ Reviewer asignado exitosamente via API"
            else
              echo "‚ùå Error HTTP $http_code al asignar reviewer:"
              echo "$response_body"
              exit 1
            fi
          
          echo "‚úÖ Reviewer $REVIEWER asignado exitosamente al PR #$PR_NUMBER"

  post-on-slack:
    runs-on: ubuntu-latest
    if: always()
    needs: [select-reviewer, assign-reviewer]
    steps:
      - name: Post to a Slack channel
        if: always()
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: '${{ vars.SLACK_PULL_REQUEST_CHANNEL_ID }}'
          payload: |
            {
               "blocks": [
                  {
                     "type": "context",
                     "elements": [
                        {
                           "type": "image",
                           "image_url": "https://avatars.githubusercontent.com/u/${{github.actor_id}}?s=400&u=b81e946713a585cd4895227203a3d2ba5d5b3b46&v=4",
                           "alt_text": "actor"
                        },
                        {
                           "type": "mrkdwn",
                           "text": "<https://github.com/${{github.actor}}|${{github.actor}}>"
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "text": {
                        "type": "mrkdwn",
                        "text": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Workflow # ${{ github.run_id }}>"
                     }
                  },
                  {
                     "type": "section",
                     "fields": [
                        {
                           "type": "mrkdwn",
                           "text": "*Repo*"
                        },
                        {
                           "type": "mrkdwn",
                           "text": "*Pull request*"
                        },
                        {
                           "type": "mrkdwn",
                           "text": "<https://github.com/${{ github.repository }}|${{ github.repository }}>"
                        },
                        {
                           "type": "mrkdwn",
                           "text": "<${{ github.event.pull_request.html_url }}| Ver PR>"
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "fields": [
                        {
                           "type": "mrkdwn",
                           "text": "*Target Branch*"
                        },
                        {
                           "type": "mrkdwn",
                           "text": "*PR Author*"
                        },
                        {
                           "type": "mrkdwn",
                           "text": "<https://github.com/${{ github.repository }}/tree/${{ github.event.pull_request.head.ref }}|${{ github.event.pull_request.head.ref }}>"
                        },
                        {
                           "type": "mrkdwn",
                           "text": "<@${{ needs.select-reviewer.outputs.pr-author-slack }}>"
                        }
                     ]
                  },
                  {
                     "type": "section",
                     "text": {
                        "type": "mrkdwn",
                        "text": "<@${{ needs.select-reviewer.outputs.slack-reviewer }}> Por favor, revisa este pull request :${{ needs.select-reviewer.outputs.random-emoji }}:"
                     }
                  }
               ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}